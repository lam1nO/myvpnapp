import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from handlers.main_menu import router as main_menu_handler  
from handlers.top_up import router as top_up_handler  
from handlers.referral import router as referral_handler
from handlers.instruction import router as instruction_handler
from handlers.devices import router as devices_handler
from handlers.support import router as support_handler
import keyboards
import config
import db
import billing

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(storage=MemoryStorage())

dp.include_router(main_menu_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.include_router(referral_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.include_router(instruction_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.include_router(devices_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.include_router(support_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.include_router(top_up_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã

# –î–æ–±–∞–≤–ª—è–µ–º Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ callback'–∏
dp.callback_query.middleware(CallbackAnswerMiddleware())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ {Name_of_VPN}. –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
    )
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º‚¨áÔ∏è", reply_markup=keyboards.create_main(),
    )

@dp.message(Command("old_start"))
async def old_send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥.",
        reply_markup=keyboard
    )

# –í—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
@dp.callback_query(F.data == "buy")
async def choose_payment(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ÆKassa", callback_data="pay:yookassa")],
            [InlineKeyboardButton(text="üí∞ Payeer", callback_data="pay:payeer")]
        ]
    )

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
# @dp.callback_query(F.data.startswith("pay:"))
# async def process_payment(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#     payment_type = callback_query.data.split(":")[1]
#     await billing.process_payment(user_id, bot, callback_query)

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
# @dp.callback_query(F.data.startswith("check_payment:"))
# async def check_payment(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#     payment_id = callback_query.data.split(":")[1]
#     await billing.finalize_payment(user_id, payment_id, bot, callback_query)

async def main():
    dp.startup.register(startup_notify)
    await dp.start_polling(bot)

async def startup_notify():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
